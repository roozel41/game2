#labels renderer,texture,atlas,sprite,drawing,animation
= Renderer 2D =

The renderer gives you ability to draw 2D sprites on the screen.

The drawn screen can be a lot larger than the screen. The visible portion of the screen is defined using a camera.


== Sprites ==
Sprites are 2D bitmaps.

Due to an optimization issues, all sprites we want to render are located in an *atlas* texture.

Sprites are drawn using the texture regions, which specify the portion of the atlas bitmap ( in pixels ) the sprite is located in.


== Atlas ==
An atlas is a large texture where an artist can place a lot of smaller sprite bitmaps.

*CAUTION* an atlas texture has to have a ^2 ( power of two ) dimensions, and the largest supported dimensions are 1024x1024.

== Animation ==
*TODO*

== Sprite batcher ==
A device used to draw sprites on the screen.
It uses two methods:

{{{
/**
 * Draws a sprite with the texture defined for the batch.
 * 
 * @param x				sprite center X coordinate
 * @param y				sprite center Y coordinate
 * @param width			desired sprite width
 * @param height		desired sprite height
 * @param region		texture region to draw the sprite with
 */
public void drawSprite( float x, float y, float width, float height, TextureRegion region );

/**
 * Draws a rotated sprite with the texture defined for the batch.
 * 
 * @param x				sprite center X coordinate
 * @param y				sprite center Y coordinate
 * @param width			desired sprite width
 * @param height		desired sprite height
 * @param angle			rotation angle in degrees
 * @param region		texture region to draw the sprite with
 */
public void drawSprite( float x, float y, float width, float height, float angle, TextureRegion region );

}}}

The latter allows to draw rotated sprites.
Both allow to specify the size of the sprite, so we can scale the images to our hearts contents.

== Entity visual ==

Entity's visual aspects are represented using an `EntityVisual` abstract class.
The class contains a method:

{{{
/**
 * Draw self.
 * 
 * @param batcher
 */
public abstract void draw( SpriteBatcher batcher );
}}}

Override this method in your custom implementation to get access to the `SpriteBatcher` instance which you can use to render your objects.

The class should contain applicable `TextureRegion` or `Animation` fields that describe the graphics features you want to draw.


*CAUTION*: The renderer currently uses just a single atlas texture, so you can't specify which texture to select.

==Visuals factory==
You need to set up the `Renderer2DView` instance so that it knows what visual representations it should create for the specific entities.

You achieve that by registering a factory.

Here's a sample registration:

{{{
m_rendererView.register( Bird.class , new EntityVisualFactory() { @Override public EntityVisual instantiate( Entity parentEntity ) { return new BirdVisual( parentEntity ); } } );
}}}

The *register* method takes a class of an entity as its first argument, and the factory that should be used to create the visual representation as the second one.

The factory itself is an interface with a single method *instantiate*:
{{{
public interface EntityVisualFactory extends ObjectFactory< Entity, EntityVisual >
{
        /**
         * The factory method.
         * 
         * @param parentEntity
         * @return
         */
        EntityVisual instantiate( Entity parentEntity );
}
}}}

Implement it as you see above in order to create a representation you desire.

The factory concept this view uses is described in section [GenericFactory Generic factory].